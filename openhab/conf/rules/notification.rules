import org.joda.time.DateTime
import org.joda.time.Duration

val Functions$Function1<String, Boolean> sendNotif = [    
    String message
    |
    sendMail("voji@voji.hu", "Openhab warning", message)
    sendNotification("voji@voji.hu", message)		
	logInfo("rules.notification", message)
    return true
    ]

val Functions$Function4<SwitchItem, DateTimeItem, Integer, Functions$Function1<String, Boolean>, Boolean> checkBoilerOverHeat = [    
    SwitchItem htRelay,
    DateTimeItem lastUpdate,
    Integer duration,
    Functions$Function1<String, Boolean> notifFunc
    |        
    if (htRelay.state == ON) {
		val DateTimeType lastUpdateDateType = lastUpdate.state as DateTimeType
		val DateTime lastUpdateDate = new DateTime(lastUpdateDateType.calendar)
		if (lastUpdateDate.isBefore(now.minusMinutes(duration))) {
			val Duration diff = new Duration(lastUpdateDate, now)
			notifFunc.apply(htRelay.name + " heating more than " + diff.getStandardMinutes() + " minutes"  )
			return true
		}
	}        
    return false
    ]


val Functions$Function4<NumberItem, Integer, Integer, Functions$Function1<String, Boolean>, Boolean> checkTemp = [    
    NumberItem htTemp,
    Integer minTemp,
    Integer warnDiffTemp,
    Functions$Function1<String, Boolean> notifFunc
    |        
	val Number tempIn = htTemp.state as DecimalType	
	if (htTemp.previousState != null && htTemp.previousState.state instanceof DecimalType) {
		val prevTempIn = htTemp.previousState.state as DecimalType
		if (Math.abs(tempIn.intValue - prevTempIn.intValue) > warnDiffTemp) {
			notifFunc.apply(htTemp.name + " sensor temperature difference is over the limit! Temp: " + tempIn + "PrevTemp: " + prevTempIn)
		}	
	} else {
		logInfo("rules.notification", "Variable (" + htTemp.name + ") previous value is not defined, diff calcualtion ignored" )
	}
	
	if (tempIn < minTemp) {
		notifFunc.apply(htTemp.name + " sensor temperature is bellow freezing point! Temp: " + tempIn)
	}
	
    return false
]

val Functions$Function2<String, Functions$Function1<String, Boolean>, Boolean> notifTest = [
	String message,
	Functions$Function1<String, Boolean> notifFunc 
	|
	notifFunc.apply(message)
	return true
]

rule "FrontDoorMovement"
when
Item mvFrontDoor changed to ON
then 
	if (locSomeAtHome.state == OFF) {
		sendNotif.apply("Nobody at home, but front door movement detected")
	}
end 

rule "HeaterOnTimeTest"
when
    Time cron "0 0/10 * 1/1 * ? *"   // every 10 min, generated by: http://www.cronmaker.com/
then
	checkBoilerOverHeat.apply(htRelayHeaterLivingroom, htRelayHeaterLastUpdateLivingroom, 60, sendNotif)
	checkBoilerOverHeat.apply(htRelayHeaterDungeon, htRelayHeaterLastUpdateDungeon, 60, sendNotif)
	checkBoilerOverHeat.apply(htRelayHeaterBoiler, htRelayHeaterLastUpdateBoiler, 30, sendNotif)
	checkTemp.apply(htTempLivingroom, 13, 5, sendNotif)
	checkTemp.apply(htTempDungeon, 13, 5, sendNotif)
	checkTemp.apply(htTempBoiler, 13, 5, sendNotif)
end

rule "NotifTest"
when 
	Item devNotificationTest changed to ON
then
	notifTest.apply("Notification test success!", sendNotif)
end