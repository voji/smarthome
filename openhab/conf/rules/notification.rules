import org.joda.time.DateTime
import org.joda.time.Duration

val Functions$Function1<String, Boolean> sendNotif = [    
    String message
    |    
    sendNotification("voji@voji.hu", message)		
	logInfo("rules.notification", message)
    return true
    ]

val Functions$Function3<SwitchItem, DateTimeItem, Integer, Boolean> checkBoilerOverHeat = [    
    SwitchItem htRelay,
    DateTimeItem lastUpdate,
    Integer duration
    |        
    if (htRelay.state == ON) {
		val DateTimeType lastUpdateDateType = lastUpdate.state as DateTimeType
		val DateTime lastUpdateDate = new DateTime(lastUpdateDateType.calendar)
		if (lastUpdateDate.isBefore(now.minusMinutes(duration))) {
			val Duration diff = new Duration(lastUpdateDate, now)
			sendNotif.apply(htRelay.name + " heating more than " + diff.getStandardMinutes() + " minutes"  )
			return true
		}
	}        
    return false
    ]


val Functions$Function3<NumberItem, Integer, Integer, Boolean> checkTempDiff = [    
    NumberItem htTemp,
    Integer minTemp,
    Integer warnDiffTemp
    |        
	val Number tempIn = htTemp.state as DecimalType	
	if (htTemp.previousState != null && htTemp.previousState.state instanceof DecimalType) {
		val prevTempIn = htTemp.previousState.state as DecimalType
		if (Math.abs(tempIn.intValue - prevTempIn.intValue) > warnDiffTemp) {
			sendNotif.apply(htTemp.name + " sensor temperature difference is over the limit! Temp: " + tempIn + "PrevTemp: " + prevTempIn)
		}	
	} else {
		logInfo("rules.notification", "Variable (" + htTemp.name + ") previous value is not defined, diff calcualtion ignored" )
	}
	
	if (tempIn < minTemp) {
		sendNotif.apply(htTemp.name + " sensor temperature is bellow freezing point! Temp: " + tempIn)
	}
	
    return false
]
rule "CehcFreezepoint"
when
    Item htTempLivingroom changed
then		
	if (htTempLivingroom.state instanceof DecimalType) {
		val Number tempIn = htTempLivingroom.state as DecimalType		
		if (tempIn < 13) {			
			var Number prevTempIn = 0
			if (htTempLivingroom.previousState != null && htTempLivingroom.previousState.state instanceof DecimalType) {
				prevTempIn = htTempLivingroom.previousState.state as DecimalType
			}
			sendNotif.apply("Room temperature is bellow freezing point! Temp: " + tempIn + " prev temp: " +  prevTempIn)			
		}		
	}
end

rule "DungeonFreezepoint"
when
    Item htTempDungeon changed
then		
	if (htTempDungeon.state instanceof DecimalType) {
		val Number tempIn = htTempDungeon.state as DecimalType		
		if (tempIn < 13) {
			var Number prevTempIn = 0
			if (htTempDungeon.previousState != null && htTempDungeon.previousState.state instanceof DecimalType) {
				prevTempIn = htTempDungeon.previousState.state as DecimalType
			}
			sendNotif.apply("Dungeon temperature is bellow freezing point! Temp: " + tempIn + " prev temp: " +  prevTempIn)			
		}
	}
end



rule "HeaterOnTimeTest"
when
    Time cron "0 0/10 * 1/1 * ? *"   // every 10 min, generated by: http://www.cronmaker.com/
then
	checkBoilerOverHeat.apply(htRelayHeaterLivingroom, htRelayHeaterLivingroomLastUpdate, 60)
	checkBoilerOverHeat.apply(htRelayHeaterDungeon, htRelayHeaterDungeonLastUpdate, 60)
	checkBoilerOverHeat.apply(htRelayHeaterBoiler, htRelayHeaterBoilerLastUpdate, 30)
	checkTempDiff.apply(htTempLivingroom, 13, 5)
	checkTempDiff.apply(htTempDungeon, 13, 5)
	checkTempDiff.apply(htTempBoiler, 13, 5)
end

